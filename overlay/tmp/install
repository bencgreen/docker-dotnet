#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # install dotnet dependencies
    let deps = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
        zlib
    ]
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision
    bf write $"Installing .NET v($revision)."

    # install .NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/8.0/alpine3.18/arm64v8/Dockerfile
    bf write "Installing .NET runtime."
    let dotnet_build = match (get_major $revision) {
        "9" => "xxx"
        _ => $revision
    }
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/8.0/alpine3.18/arm64v8/Dockerfile
    bf write $"Installing ASP.NET runtime."
    let aspnet_build = match (get_major $revision) {
        "9" => "xxx"
        _ => $revision
    }
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision (i.e. get the first character)
def get_major [
    revision: string    # Revision number
] {
    $revision | split chars | first
}

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"(get_major $version)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-x64-dotnet" => "b090b5499954ad246f136e64fbbb6ff375fceee7f0933d758ec2c595275c54aea353453b755f42d9ed300449c9d7b24dd13ff27c325869eaca2f01b8dba880af"
        "6-arm-dotnet" => "2eabd2cfcac1061d93b0ff45891a95cd74dbf0959f5281609d763f48ca97f4e97ba32b02820f9c3b5a18be757666d2781fb6eca12623ad2b6ede3297b074a937"
        "6-arm64-dotnet" => "3efad6050ec2bc3a2df40aaf8d16761be204ea866728d4b2c09e0ba4f4dc46225ba683c1c8a1ed446d2aed80e6d9c8eb46892fc6f28f2b2107bbc4d277de2d76"
        "7-x64-dotnet" => "dc9e55fd4125446d4243390909216295d5c120edb2c24766b49f66ee5a96cfae9fa7a36ce72eee745d269a8c2d31f198442b6b891b6c72a75c1950c9c6e587be"
        "7-arm-dotnet" => "f453bc45a8cb67a8b7e536e8572d382840a0ebd2879ea84570379f88a811f3cb88f08f1404ff84b3bc683d3f0351c38686b8276dabaa0e5132bd4821949fda00"
        "7-arm64-dotnet" => "594ec43ca1d38899eb04d5e29758ebeab1d478de7888e10639b30ad57d8921f3f78d7be1ad75d25143660176b63c64a89ab5b0770e03dd3db1aba89e0e6ac20b"
        "8-x64-dotnet" => "a585682ccc94de1eece4fd61f01eac99bb735ebc59faee6358022a9fe383124c68ea3ea166eee26edf21349ddc289ed81ffa46f815a7731a6c5c0ba9f37b9aff"
        "8-arm-dotnet" => "73244d5b97695060eab975d620deb9d438b8e299348483f29e9f1964b611886b5d4fc46900fba941ac5e952d8ef948645e6550ad74e3c802a4ac38213824fd6e"
        "8-arm64-dotnet" => "0b91b9bb9c8932a86ce4d84c6ecce623192ccf20b5243ce8aaaa837f92c6352b112e183efc9877fd883d072696be8b6ccb106430d88fdf044ae555d481d45319"
        "6-x64-aspnet" => "8e496db5141524a67567f7e24c21bd62c88543d7d3261cbedb60b9bab29f91093fed50812555fa15c741b79c612bb825a4b43acbf2735a71480056e795781cfb"
        "6-arm-aspnet" => "2c7456b921a03ee42ea1b5b5772f826a79af42ddcbff6a328072345a2d4719e1d36781be335c0607f8480fc879062a30a94f09dd4425df82dcdce5abbddf6d2e"
        "6-arm64-aspnet" => "a4107fca7905f498608287d64bfae67c927669a6cd98b12abc48f9ff15f66ae244f54c1d546b6fa1d9a90f7a15b5787101be6995fa48e1d8b346a6b033aaf747"
        "7-x64-aspnet" => "56c92fa587817422c3b521e0acacfd7fc4e1a8ca0d816eec526cdd324a4623ef0e8c506b44c0dabd751f362c125d597a606d5fc61a8604109118bf83dbbae9ac"
        "7-arm-aspnet" => "87df0ed9da9e23e3a84c75f213580fc8da7178bc17e431d285d8e87667ab688bd8e85b0cab3dbc2b6aa9c265f9a57ef00daf12157bbcc948ad8407aa3604d569"
        "7-arm64-aspnet" => "419cedbe0fe956a34fa2e875581d7d01b9e3652623719232694119b137858529a326c2eecfa5c6074a36ac3450f6d5f3707eff343e8b0ff2779110d4bc040a86"
        "8-x64-aspnet" => "cf9eccbadaee5cbb7787acb30c2826ef2ace343a443034b2695ab362d867657d0c10218ec3d13706c85d03921599a463105b2ea58d684c911de6a97df3c93933"
        "8-arm-aspnet" => "78af2bf6c79cd06449808e54ce66f9b67976773aefe826eb69834c66280cd3a612ef2c41594e90ff12d6223194a0935a2dd5b1342415b767175f7b23ddf4788d"
        "8-arm64-aspnet" => "1e92f8b880a30c71b1620dbd9600dd77e7bf44f175dc8d7d3579f814b419305d0a242c130d82528804ac0ca4b486df0959d7fde6bd6fc322a2bf63d6f815828d"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
