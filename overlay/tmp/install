#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # install dotnet dependencies
    let deps = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
        zlib
    ]
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision
    bf write $"Installing .NET v($revision)."

    # handle preview versions - they come with build versions that we want to strip away
    # see https://dotnetcli.blob.core.windows.net/dotnet/checksums/9.0.0-preview.3-sha.txt
    bf write "Stripping away preview build versions."
    let dotnet_build = match (get_major $revision) {
        "9" => "9.0.0-preview.3.24172.9"
        _ => $revision
    }
    let aspnet_build = match (get_major $revision) {
        "9" => "9.0.0-preview.3.24172.13"
        _ => $revision
    }

    # install .NET runtime
    bf write "Installing .NET runtime."
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    bf write $"Installing ASP.NET runtime."
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision (i.e. get the first character)
def get_major [
    revision: string    # Revision number
] {
    $revision | split chars | first
}

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"(get_major $version)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-arm-dotnet" => "0f07c9afac935a2268c979f98c2e49f2d96f146d2d253ca017fe01493477708de21ff82f8e3aaa5d207a27ea17a3b501d4631d10cfa08f41522461f0a5982c81"
        "6-arm64-dotnet" => "3d642720dd7420d1431fe5ff7b2f445e8db8cb0c9ad87b03046f22fa0e369707af9e06aca6d2edd844ec989ca2cd0a92fc9b68e8435bdbadb8a58cfff04cf5c4"
        "6-x64-dotnet" => "0bc940279c45704114ab29b94867d1262e7376a22436c94d4c662af6923159bd2cb891cd822f1d559ba06d7ee06c83ad0cbc6c8eb184d837eb9d39a4bb9fe230"
        "7-arm-dotnet" => "807d0472f05612b5b36b6d08978173cd434856d1fa8ddbf326146628c2cd55170c7490df713dc76cd5441679c95c71f9884ad8cc46e9219217843458b36c9bb2"
        "7-arm64-dotnet" => "0bb9e0bf5f29bd3c7e2e756f5504807f416d345b42ddf501fbef3150a485795d5db84724e1e08b14482a3822934a028bb5fd59defaf2e5eda97aac6fb84490bd"
        "7-x64-dotnet" => "778908f17f518360fd4f883b0ff52285955d09b42eb50fd75944910f56ad027fb86e2d587ff1c2d77a0465373a1019d6eaad2d2103eeb5a774776fcd5171b6b1"
        "8-arm-dotnet" => "e0b38b3280a9ed109140776d14be3c8a66b38f66ea266987ab31ef969a0ce79aa2215c83298c24d31bdb2b77016653ec95d3089d81af4a83abb396aa069ab5f8"
        "8-arm64-dotnet" => "629a3f018c949454e8b0361bf287b7646887844853819e7af0579730a0ea18b9f293dc687ef19ed085c57f758ed0a61083e9de4cd5741d0dd16dfc905ea5f0dc"
        "8-x64-dotnet" => "b6c1bc44f068558c26d7a0114147c989f48feb5c43a4dbaf7035825477918e2e20a89b2934b47bfa9518e243147436ce58e6dec666e563c6637c582e00085dd0"
        "9-arm-dotnet" => "c5638c562451f2c2d591e51e014edb15111ab49b8a71016bca3d4095a74d9064184a3f5bdeb236fda59ad98dd730221038628c5ac6105d9a4eae6664a98abf16"
        "9-arm64-dotnet" => "c8777c446cad3a37012e47625031552d517e27d32198ccb746b1544135abcf60bfc3ff7e801cfcfb72d2d8563604345e2da011fa0aa8939bacb13d8b619bea5d"
        "9-x64-dotnet" => "adace7cff420fcf0e437bdfc90b6a39b703c53301b95d2fbdaab15fb4a7acc6d8a40ce6107a8c0f30230c6c8145c28e8c0f33c2ab604c6d1946d80dd8d350c48"
        "6-arm-aspnet" => "4aa584e1d7a281ee0ee49e678239331cb3ed04b292284c09a1359ee09d2dcc86cef211db373854ff6250cf5d71d9c0c88d5c2eb0ef2c8d0d61705c5e3f9023e0"
        "6-arm64-aspnet" => "cf698e2185311aa9e481534b8d8632e14a4284dd9529db62d2984e4385217358de3aa0a8e1c6851c6943ffdc2adb81afcee99dd92e08092d9536838f132b7df4"
        "6-x64-aspnet" => "05afa6c27d1e8ffc2722ba6ab9f0f0a9aded82812399323b0e723fcc85bd9864969031378d92e7d993b9fd80fae7276d5d1366c7050f5c175540b1416b1cd230"
        "7-arm-aspnet" => "d3a5e58e231c7b923db0b0400ffe97514f8267e327a6cc28a5f820d3baa4bf6a03cd31bb4b6c8408138fdeb9cb0388d018a3fdeda67e4a31af28cf16c874149f"
        "7-arm64-aspnet" => "0b34bb383e6bbc17489bdba0c006a866e56a532453a49b95e3d39c830924462f45c6b757ebb416a32e40180b852178c35ec1b64ad761f33b63a98ef60e01ceea"
        "7-x64-aspnet" => "9a89712051d663933850543c6bd9ef6ba99d42df974f12d5c0e6d31744321b50e8f02e75b0ddde4c6456f03f1f61205ad25c29f02b33c5e97110516efa7730a9"
        "8-arm-aspnet" => "534d395e8d9a82995a190e63ebf971654d7b411285cff823396f598df5eee393d50db5f990b7022f50e53b105807d06df3ce3b4918f843dd105a7fc2ef8cb226"
        "8-arm64-aspnet" => "1f3e24565c2b6d0541bb3f919451f4d554ed028e2bfedf8c15bc063f852398ce88f167130438720b82998bfaf7c78f80dae3a8c3e8a87499fc9e18ac606c4eb8"
        "8-x64-aspnet" => "46db57d8c204a216027c3737d96e91e421cc39db7f346911d7784c54df57907506af8815a5e0ad4164a7533d000ebf57a27da7fc820c8e0b6c95847c308eb338"
        "9-arm-aspnet" => "70700a6ac11a4a4e192e8d536d7dbe746aa2b209fbe5522a9bb6b09988b1d40019d03327a1e79917f04a8008581b685f7b6fc925750ffc6e0de4877955ebbad8"
        "9-arm64-aspnet" => "6011b173f4f31ad942f4911623b1b0175e03c160ea55b2d50c454bc0a921ab3f35a5ad2f822590ccab5ea3470ba0f5ac9a617386e4538f82b235ff68e46ab6a9"
        "9-x64-aspnet" => "8e6c42872a062f50e25432e0945a18ff4508d708983f004bfcb619c76d5e13b5dd0653cffc5931ec7834d1d7db174566b4d9d00016c838f98b351d821e012334"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
