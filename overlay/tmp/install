#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # install dotnet dependencies
    let deps = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
        zlib
    ]
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision
    bf write $"Installing .NET v($revision)."

    # handle preview versions - they come with build versions that we want to strip away
    # see https://dotnetcli.blob.core.windows.net/dotnet/checksums/9.0.0-preview.5-sha.txt
    bf write "Stripping away preview build versions."
    let dotnet_build = match (get_major $revision) {
        "9" => "9.0.0-preview.5.24306.11"
        _ => $revision
    }
    let aspnet_build = match (get_major $revision) {
        "9" => "9.0.0-preview.5.24306.11"
        _ => $revision
    }

    # install .NET runtime
    bf write "Installing .NET runtime."
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    bf write $"Installing ASP.NET runtime."
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision (i.e. get the first character)
def get_major [
    revision: string    # Revision number
] {
    $revision | split chars | first
}

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"(get_major $version)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-arm-dotnet" => "e8b74decfc8b818dba00802cd697dfb6195cd8791a54e711b99fb87f3850b576d6e3887301fe1c7b8837e549acccd5e7be01e7df0a818c5325544938dcbda157"
        "6-arm64-dotnet" => "4aaae1b7b28a417b6c37dd243e4b2519859e718b64eea29cdfa96b9e1f1b11a06af8c45f0eb33e5fbf55711f2aa8c6dc31791faa28bc75e727b29ac8c75bbcc4"
        "6-x64-dotnet" => "be9022f66c2edeba71584be94a35133b524c3bec5a9a1e773e9825004f80e047bf65bd6ddbc1c609d118ba80094585622bd0ffc146518b58814f08d69c68433e"
        "7-arm-dotnet" => "25ccc373d1c4c0eb741e048c6fd48366310b36ac6f068c50f6bc01342a000464144e8457e7e1b6ccf6d99544d4914022efcb824e75636517bbf61c94852cdd74"
        "7-arm64-dotnet" => "552ca73467f8043d351c20d71df95ba963b32e8c75706df6f5d3fce525f3efdf1314df296c44fbedad5575782e37633998a79b2c23f7f7420f814ee2488f30a2"
        "7-x64-dotnet" => "31b9da08d633cd0028eb08c36ee2c5c3cb1be6d3c5e010c85ae291496fe5e818b5be59f5d47aff86ed939c260f762e57ff06934a4d0954376935b1adc799f1bf"
        "8-arm-dotnet" => "1ab5c0ced0444f557547266e80dc50ce2778ea24883fbbaead063f659c2fbbeb9e52f6c92257b1b00c77a743df76effef4d7efd34736acb0e44f5914e75f5d7d"
        "8-arm64-dotnet" => "dc8383bf283e76a2fcf22bbc53eab10faa6dee72aa6ff542427e1a1fdf14c4071f1b3016d895984f15c751707e2e05791c1522f361f3389ba6068c235550e484"
        "8-x64-dotnet" => "db25afb6603cfd1cafafb3856ea59205b350b263441928c7010372dc1ee813f03d9ba01186468c95402cc09c49367f129e84f8e30b9ebb4a27f5ed66bb573cc1"
        "9-arm-dotnet" => "62aa5ac3fb049900dceb7eda01fc6d0392291ce15a26435c5ce502c0dac607d1d38c29864c3042838bf82da0294b10ff245211bac51f1c3a21e05eed8ec5a290"
        "9-arm64-dotnet" => "d81305d5715c84ea1c424102714198f974e977ba24b5f40ed38288c38b3b0d2ff55f0c4803a9535f8b4f2c1bc3456fdce94a30b9ba49dd02ebf4c259a80fe48e"
        "9-x64-dotnet" => "8c41a36a84bfed4b74a20329566146558bb3cf4ba6b9aec56e93a1c7c2439a7a3c54dc7b152b1c822a6067cc7806557958c6f6389d535a83205651d9ed80ba51"
        "6-arm-aspnet" => "3af78b991970d7d524e769e14ccb7870a8a7d52b4cb40526a0b92b8d85c4e676eb247e7db9f5995d5f73a55d0db92fbcfd667c3991e80d0543b4e91d107c5da2"
        "6-arm64-aspnet" => "c0defb7cb37b708211f7c9823ad7f28605403cc0028bcf37a7ddbc801d59b4fb24e6ffe4422cefe57a0e2a45f1a0e71f8583ec48465307ddf7b96f65444b20fb"
        "6-x64-aspnet" => "6c79053842b907b2a5d79432e363d6d1fa45e59b73d469cbd8821e854d72dfc46b43e69156e608254e9815daf80ea534613ecf65cbbd6d8ee65789db99bf805b"
        "7-arm-aspnet" => "ca84e0eff052d45b7fa9afd8a68f1d56264155b507881105d206969922057bf332895a3c3a2a1702648e46712f022574d93ae187c8fd2610f8392909568abf56"
        "7-arm64-aspnet" => "65406e1714a3117daa342b3fd0dbcd5c3214315611eacbbd8580827f69a07a9480530320ba40692a3d6dbff832d929a1420079f1db30ca3fd67a6fd035149d04"
        "7-x64-aspnet" => "a80f31193af70d556e8d026d39d79863c8389b065fe0778e7b4360f7d1f6d36503ba52736c40e74a716c3c30500b185816ed60d79b06ae295754b67374a1fa45"
        "8-arm-aspnet" => "7b0e39b2f517539f261e4b193e02b991149ab5e520c350fad2463481afde461891b287aeefe642ee6df5fef33df4a639c9f94feceed84ede5980ff3f297dcded"
        "8-arm64-aspnet" => "80141d73f84c902c645b906fee34bf27d2bfae4d1905f259b0d89ac00887663301dc6774357b86736bb65f068161358a7db677a30a49fa613c5328b65fa48a3e"
        "8-x64-aspnet" => "bd5fea6fa65dce16cc3e9879cccb4a684253d40fe6c00e610dd513da2bd3a9f89eed4442fc2a660bf1749fe22fea03a0519291f01a10068376507070105a1d0c"
        "9-arm-aspnet" => "44628326e3efb241ee24e9a39abf6f4318d415d1977655d8fcdbdb8c61aa05f4b4c058dd8c0c52cf206c3979e5b5b2cad86cdb9f56e0a2b10bf2d9994ae8ebde"
        "9-arm64-aspnet" => "dfc4e8f082214ff796ca6b3c548b38b1e61221faa90eb96e1f19771f14197e2e4ee616057cd29b37addeba91098ba151859be8eb51015b1bc38113fe2d3c41b6"
        "9-x64-aspnet" => "f82ec65e016c0996b74c144c1a11de7d2f3bc8bf7a51f217d697fc8a019039995df23c7e64df1e98950ff5cb3a8f3c815735102288bd73efd1192a20f21761c2"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
