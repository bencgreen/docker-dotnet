#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # install dotnet dependencies
    let deps = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
        zlib
    ]
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision
    bf write $"Installing .NET v($revision)."

    # handle preview versions - they come with build versions that we want to strip away
    # see https://dotnetcli.blob.core.windows.net/dotnet/checksums/9.0.0-preview.3-sha.txt
    bf write "Stripping away preview build versions."
    let dotnet_build = match (get_major $revision) {
        "9" => "9.0.0-preview.3.24172.9"
        _ => $revision
    }
    let aspnet_build = match (get_major $revision) {
        "9" => "9.0.0-preview.3.24172.13"
        _ => $revision
    }

    # install .NET runtime
    bf write "Installing .NET runtime."
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    bf write $"Installing ASP.NET runtime."
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision (i.e. get the first character)
def get_major [
    revision: string    # Revision number
] {
    $revision | split chars | first
}

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"(get_major $version)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-arm-dotnet" => "e2241fbc220a2b0e6cbd2d0c208315c290008fe9c6d6dcaeedab7bf2d3bfb572cc268f6b845db012e3868662de1dea3995a6b4a3b764904d1d3a26ae4d045e26"
        "6-arm64-dotnet" => "5162effcf3e34f9a5c4320d007dc4f322bb816135c5dc3dec5f692c84f111301b14b2bef352112da7f1df51c31c8706c480eb854b0256c388c402ff3b41ed627"
        "6-x64-dotnet" => "f093e16317a90dabc125bbaca5933956fb4a786bb03bebb56ccaebd36c799e1e9a3b43a80a6471505ee4ed725df4fd54ac29ca53f033642a6e72388d33493aff"
        "7-arm-dotnet" => "807d0472f05612b5b36b6d08978173cd434856d1fa8ddbf326146628c2cd55170c7490df713dc76cd5441679c95c71f9884ad8cc46e9219217843458b36c9bb2"
        "7-arm64-dotnet" => "0bb9e0bf5f29bd3c7e2e756f5504807f416d345b42ddf501fbef3150a485795d5db84724e1e08b14482a3822934a028bb5fd59defaf2e5eda97aac6fb84490bd"
        "7-x64-dotnet" => "778908f17f518360fd4f883b0ff52285955d09b42eb50fd75944910f56ad027fb86e2d587ff1c2d77a0465373a1019d6eaad2d2103eeb5a774776fcd5171b6b1"
        "8-arm-dotnet" => "bec8b40e30e57a2f761b61d0c1e20202d17b54b1530a592ba0ed6039637aaa1a52e0cca85b0e107d9102cbcbe381b9350f7ad8ec5ad69f194b24eecbeac472ce"
        "8-arm64-dotnet" => "335eb00e0b7aaace00bccc199a4bc5b632a9d2b5d8ed5f3db20343e85d897ae06b3302082c05d1f55cfb9688c2a626774fd7bc90527e757e35f7cb455fec31bf"
        "8-x64-dotnet" => "a2a4b3baf7f6477f44b88af6b83aa44bbfa2ab9c5b333826153ee956e95b4fd07cff3f95cd0eebf03cffec042576a2a554597753beb0ce0f99d06227a755abaf"
        "9-arm-dotnet" => "c5638c562451f2c2d591e51e014edb15111ab49b8a71016bca3d4095a74d9064184a3f5bdeb236fda59ad98dd730221038628c5ac6105d9a4eae6664a98abf16"
        "9-arm64-dotnet" => "c8777c446cad3a37012e47625031552d517e27d32198ccb746b1544135abcf60bfc3ff7e801cfcfb72d2d8563604345e2da011fa0aa8939bacb13d8b619bea5d"
        "9-x64-dotnet" => "adace7cff420fcf0e437bdfc90b6a39b703c53301b95d2fbdaab15fb4a7acc6d8a40ce6107a8c0f30230c6c8145c28e8c0f33c2ab604c6d1946d80dd8d350c48"
        "6-arm-aspnet" => "a22b41e57b80e075d23d4e0d0dfb3df3c9ec6df43c033fdc69cef9d5de41e8fc2bc9ca56990b5880941acede83599c93f79e46c2b10b71b067f227a7182414b6"
        "6-arm64-aspnet" => "6eb6cdec88728aef28655b3b15161be5ec2871b9a7dbfdfe2002d02aa4682558871dbc78f1521639f7097b314476850f716955ee8d815a24c1cac10cd2d4bcf8"
        "6-x64-aspnet" => "320680311296f39782f60bd3ce8cac802219b9ae0a53dac243ce995f0ed91b3235bc172f06960dfae0229dcda42e6858f1a1f4c0cf12e8cf936323f6628f72f5"
        "7-arm-aspnet" => "d3a5e58e231c7b923db0b0400ffe97514f8267e327a6cc28a5f820d3baa4bf6a03cd31bb4b6c8408138fdeb9cb0388d018a3fdeda67e4a31af28cf16c874149f"
        "7-arm64-aspnet" => "0b34bb383e6bbc17489bdba0c006a866e56a532453a49b95e3d39c830924462f45c6b757ebb416a32e40180b852178c35ec1b64ad761f33b63a98ef60e01ceea"
        "7-x64-aspnet" => "9a89712051d663933850543c6bd9ef6ba99d42df974f12d5c0e6d31744321b50e8f02e75b0ddde4c6456f03f1f61205ad25c29f02b33c5e97110516efa7730a9"
        "8-arm-aspnet" => "1da42d9a05a5580efd7f4bf32c9b5aa8095131100531dce577074c919099963f14175c921a35131ef8f197fb5fed7970566cc7b9931f1e355bab8e2ccf3d24ee"
        "8-arm64-aspnet" => "841e42b4779cba9ebb1d480adb4b18a80f136866979dd3f7afeb6a4e1e1f739caa48dbff661c33417902cf87aec49abb4988fb18f64dde0802d53362feb6ab1d"
        "8-x64-aspnet" => "5aed6acd57b212806a24467dc6a432c664d675fbba97433bd4e49cdc836eb7b97be3663308ba24222cca51a59da0fd4771fedb5aee109720386201b60138711d"
        "9-arm-aspnet" => "70700a6ac11a4a4e192e8d536d7dbe746aa2b209fbe5522a9bb6b09988b1d40019d03327a1e79917f04a8008581b685f7b6fc925750ffc6e0de4877955ebbad8"
        "9-arm64-aspnet" => "6011b173f4f31ad942f4911623b1b0175e03c160ea55b2d50c454bc0a921ab3f35a5ad2f822590ccab5ea3470ba0f5ac9a617386e4538f82b235ff68e46ab6a9"
        "9-x64-aspnet" => "8e6c42872a062f50e25432e0945a18ff4508d708983f004bfcb619c76d5e13b5dd0653cffc5931ec7834d1d7db174566b4d9d00016c838f98b351d821e012334"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
