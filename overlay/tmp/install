#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # install dotnet dependencies
    let deps = [
        ca-certificates
        icu-libs
        krb5-libs
        libgcc
        libintl
        libssl1.1
        libstdc++
        zlib
    ]
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision
    bf write $"Installing .NET v($revision)."

    # install .NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/8.0/alpine3.18/arm64v8/Dockerfile
    bf write "Installing .NET runtime."
    let dotnet_build = match (get_major $revision) {
        "9" => "xxx"
        _ => $revision
    }
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/8.0/alpine3.18/arm64v8/Dockerfile
    bf write $"Installing ASP.NET runtime."
    let aspnet_build = match (get_major $revision) {
        "9" => "xxx"
        _ => $revision
    }
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision (i.e. get the first character)
def get_major [
    revision: string    # Revision number
] {
    $revision | split chars | first
}

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"(get_major $version)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-x64-dotnet" => "bee78309422930d7c3cf7880fcacc7d130b936fde6c16162448869ae7516321edc145b0a53087a5d206d07fef8844d7f06eafe6db90b035ab4957ccf3ff80d26"
        "6-arm64-dotnet" => "0466e251a07262c9796d4d67f61247f6c7c6c998414cc789dda6e4f927ab7ff9463ba226f0141f71bc27a1e55f97ed6d313220e008806be3045929b709fa1175"
        "7-x64-dotnet" => "954cb4d80a7da484c5f73a4dd26b35866fe320260af6c7c7dd79e7b82bfc4d972c6c854c705514983f78ee2f44b572f30ed622dd69e94c737e6c5663279f68be"
        "7-arm64-dotnet" => "92262e41a370d9c4b05b0dec1a73deccfe05b1c841300f6c0aa2eed49f7ca5c1d76727a571cef3c5a063edcd6da2ce69d2357c3e3372f5789387706b4512e97d"
        "8-x64-dotnet" => "bc9278786a728bcc404dd014f7823334312c0db6d949df104bb31e775f53b5684bba00611abb58873b8894d20489d5145fb351903b68dece92a7dbad14c3b9f2"
        "8-arm64-dotnet" => "a8bb01b3e3dce7cd5a5ddcb8af13f3bc9b3be1cd3d60ee728b845c88cb12005e5e8c5d54a51391fc27de4023080ce9b231c1c48e858b3f1b551a9e1936d59f27"
        "6-x64-aspnet" => "2730ef44301f0926ba8edf41180351f7f145843fd37eff8e2845eab02a5c449281bbbfdd21f1710f7773d93627f514298a46706801aef0063f920c752e063ea1"
        "6-arm64-aspnet" => "c0f827ceb51e39a0a78d82efad03a43adf1c6a9ca3e411ace69be2dac4faad56c74775381517d676154b3a5e0d972ba5ad05593623c7af945643d518749e0426"
        "7-x64-aspnet" => "e3fdc0b57683c633e18df0afb70d3348c1a756541c7dfab6c763b9b9ac471aac7b34170cc07d3b989d80521ae3b0b5c2af1aea593b4e13079bfe678356933c25"
        "7-arm64-aspnet" => "4f7b441a8116f0fe4f6429f6aa5fa68b2387bcc9e59bb56c5c8bb53733f7c2e57bd45502c15f5c2c56d554f15543dbe7cc3a3faf9b1600f018b2d229030b8bbd"
        "8-x64-aspnet" => "12723b685b86d3d2f69692781f731fe2c56bfc4d34489b9c901775e78f8f96edb78b97b9234b44b14aa2f578c1a054e425ebe8ced42f59e82c39c90c341fc1d9"
        "8-arm64-aspnet" => "9ac1b612e126c7c4a9eb2b3343c93875268f3a4d78cf4c6ece9e718b76b60f13e96efb9488e7d83cfb128ae766d8bf05e764d6a11c3a315ea1820a011afd585f"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { ^echo $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
