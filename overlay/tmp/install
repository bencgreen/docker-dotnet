#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # install dotnet dependencies
    let deps = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
        zlib
    ]
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision
    bf write $"Installing .NET v($revision)."

    # install .NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/8.0/alpine3.18/arm64v8/Dockerfile
    bf write "Installing .NET runtime."
    let dotnet_build = match (get_major $revision) {
        "9" => "xxx"
        _ => $revision
    }
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/8.0/alpine3.18/arm64v8/Dockerfile
    bf write $"Installing ASP.NET runtime."
    let aspnet_build = match (get_major $revision) {
        "9" => "xxx"
        _ => $revision
    }
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision (i.e. get the first character)
def get_major [
    revision: string    # Revision number
] {
    $revision | split chars | first
}

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"(get_major $version)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-x64-dotnet" => "ae4c0f714a5b3c686f703825fe9292d02feb0942c5a30eb98fd431714929aa0eda096d24f458aa9c66926538d147e19b2e4839bdf1bd960b48076abdc7d88bdd"
        "6-arm-dotnet" => "e6d3996c83bcd5b13476102743b6fee8b1ff11088dd176464b93ff324afada0eb639cf75d804022c25175458dfc6a070d3f72c2b2649e91ffd6e4d1f7d3bb2f8"
        "6-arm64-dotnet" => "52d568a745910923a3fbcb51e3caa8634096ec8f628587c76699e8b4fe7593822cd4c1b386484f42141afd1662c124e3f449d10be6c0ae237dcf4fba891e6a66"
        "7-x64-dotnet" => "19db551f06cb217cb1fe943c4d8b481805732859aeb3b80f9da10efd48addfbab5dd332533c567315e40d5340cb2f8991219aeb75a3495aa1d795430b2861450"
        "7-arm-dotnet" => "01ed6c62386f9996f8f7e07b22c0c85fd280ac7d9011ca10f004eb1608cd995204c22f4d5cc8238f2b0b6ca04a48810137b9033e5fdb8886e8f8fdb7bac9e98f"
        "7-arm64-dotnet" => "1ed0c1065437afbb267defb467155756c6887cc04ea188d4beaa697f6dc547583ba5ef1ed2ea772b3a3f0b6a181e7c6ad8cb242f0a937a157559dd3f3e439348"
        "8-x64-dotnet" => "a935d7b6c95e9852ba485faf5712214704eebfd5b8e1ab7b993d054f957ae0a551f57dc39a38de7064a1ab89bc1fe0bcaf908163daf9625174ec27aefd23c016"
        "8-arm-dotnet" => "fd4b339c66ae1e2193c6ac09fb00f3d1ec1d70ce63767d88e26efd381f235b7153c7a4064998116cdfabaf47e8be13b5c2dacb39229d19a66e17eeeac9515d49"
        "8-arm64-dotnet" => "3f54f8203af3851332d7c706a76af3faaf6b853f17941c4bc5d95f0589d28f115dc45a05dac9736c50e8ad1b5318e64d8262a187dfbe8cfdc610f6a1d8d64b7d"
        "6-x64-aspnet" => "a924c0946bd5076a9c36622148dfe9b7f0da5a583265276c796d0240932b19c95ca26d0d60e09f3018d902ed2c6ecff178ba21d343ea8c148d02688b962b04d6"
        "6-arm-aspnet" => "5878c2adedf912ef7100e42549706b8e17d202e220bf31d8056386ce3aa28cc939e79709aeebd743f8729770ab28feb40f59dda3ddc1261a9083d9a41544343d"
        "6-arm64-aspnet" => "06e97db40cf6a2d439bb79bc1bb3adc04737dd849e02f8800f54241918a561db48a7e0df8f092209d58fa36fdbdc937bcbfa2da322f1830d936fb9bdc0a574c5"
        "7-x64-aspnet" => "34fb86e7ab71dbecee7bd3fcfa0eb11b3e0ea3e1da758c261ddcae432245ae8f2519d9c46ecc0f011f5f0e085bb127811c61c7b7619fffe57005aa3b48112d3f"
        "7-arm-aspnet" => "4b4e814c4aa45a92ba4f7b55293360c0c90d79f4dfb87e6b2d3c8cff22647371173c1ca71657da476f16820951a697076528e902591fcd33c410ce156dceb916"
        "7-arm64-aspnet" => "35372eb25c7271751417750c5b88f74be43158674aa23862386d0d67b765f4899c59016e989fce640d254e04c618ae520af5908f207265fee3917225dbec0899"
        "8-x64-aspnet" => "b749398f5ad059c9d51e3153c9f41ac23145aea38e83a736259c4206fdb920c245685a60a6d4bcf74ce41c70f751fd133219fb66b263018ae53025e129535063"
        "8-arm-aspnet" => "3ad47bf2c6d6c24f641c1ef52552ab4a3dc093bd83ae430258f9285b108680813f894977745441b0d67662f5eba80f7b28e24b98f56306ec20a523ce74d93d49"
        "8-arm64-aspnet" => "5e48a721b7e4c5b2046b4c64abc29bfe0a931fa1887dc00ce1e75a7eede6ccad339370029c061774a123526def6b4ade934334bf7178d57bcb87717fe8d228c7"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
