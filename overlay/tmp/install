#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision

    # handle preview versions - they come with build versions that we want to strip away
    # see https://dotnetcli.blob.core.windows.net/dotnet/checksums/9.0.0-rc.2-sha.txt
    bf write "Stripping away preview build versions."
    let dotnet_build = match ($revision | get_major) {
        "9" => "9.0.0-rc.2.24473.5"
        _ => $revision
    }
    let aspnet_build = match ($revision | get_major) {
        "9" => "9.0.0-rc.2.24474.3"
        _ => $revision
    }
    bf write $"Installing .NET v($revision)."

    # install dotnet dependencies
    let deps_common = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
    ]
    let deps = match ($revision | get_major) {
        "9" => ($deps_common | append "zlib")
        _ => $deps_common
    }
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # install .NET runtime
    bf write "Installing .NET runtime."
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    bf write $"Installing ASP.NET runtime."
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision (i.e. get the first character)
def get_major []: string -> string { $in | split chars | first }

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"($version | get_major)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-arm-dotnet" => "c9af975cecddf45d855fc0e7535764a24b28d64af43a66ac25bffd6be9699a7e5db20f56acdede99e96e46e9f62135e51af136e722559d0c77fbeb87d26deac6"
        "6-arm64-dotnet" => "c01365b0e5cc72dfc7bf3c1d512edc74d0ef959cb7a6137d67e9ed9d8a26d8744258ea3005df009842cbaf46844c913626e3dcba15830118acd95e14d3c2e670"
        "6-x64-dotnet" => "b2a3fa2656cb255235d886da74753c78c3d6d52b62e10d69053b9c08b66265867d6f369b4a6e133abff21d2b2912722e757438e2e9dbad10b9db6a55545cd415"
        "7-arm-dotnet" => "25ccc373d1c4c0eb741e048c6fd48366310b36ac6f068c50f6bc01342a000464144e8457e7e1b6ccf6d99544d4914022efcb824e75636517bbf61c94852cdd74"
        "7-arm64-dotnet" => "552ca73467f8043d351c20d71df95ba963b32e8c75706df6f5d3fce525f3efdf1314df296c44fbedad5575782e37633998a79b2c23f7f7420f814ee2488f30a2"
        "7-x64-dotnet" => "31b9da08d633cd0028eb08c36ee2c5c3cb1be6d3c5e010c85ae291496fe5e818b5be59f5d47aff86ed939c260f762e57ff06934a4d0954376935b1adc799f1bf"
        "8-arm-dotnet" => "aec8c820591a13d17d80a16880fa622961ea3a982d5ea30b26ea915ed8d860e9500b2ac7aee07aacc0a3f505ea33a665037096a3dbc9ed95fccf335e4b4b9dab"
        "8-arm64-dotnet" => "1eecafe272a071ed78bc91b4c900ab70ec102c9f82cedcfde279bd9921a7e740ee9e881538a00a6ce400d9dc0ebc9305e8cd4962db2431e73b691e1052694ec1"
        "8-x64-dotnet" => "2d6edcc14b9d9fef93ac72fb32b17a6318f2af5bdd83c4b34b35c591dcd406da4d489c1a4d5808a61bac2ee14b40bb6b0e8ffe9b424901b70fe2d969deffa087"
        "9-arm-dotnet" => "59e2d7cb35a63984752d296bf02a1e8c2a8db0dcbb2bbce43375f9f7ea8ded93867ce4c20b09c03de94e3e33463f15cbf9aff058a9331daf0ac504c4771db96c"
        "9-arm64-dotnet" => "3de9320983e8e043eb5bc301e324425570b21ccf0d5eb97c3e1fde2ab97e98206d8d1784d96d6913be0bb4b8ce50c5cff956e7f8981ee0a1f1c9df227679212a"
        "9-x64-dotnet" => "d40a1861d4e550a46d4e9104176d107eaa0a1be94cc6ac583ef331e6ad31ccaf4d37a427620300a37376c86f122a920a2b7b40b4e4ac347be2d62a38dc83d965"
        "6-arm-aspnet" => "45ba3c29aa95e4810a710907bd93da7c3e3a09c7972d7b19857aa47ae4fd5fad19bdac2c5e037f9abd1996a27d0e39acffc3278f2e7782474140070f355d888a"
        "6-arm64-aspnet" => "4e99263938e9de1fa508fcdf0a59e7f61a234f8bd60a4947d043c5ac5bc3108eb46254bcb7148ca0a0391f5e9cee74db1ea617f576d7e37af22ba108e9433e1a"
        "6-x64-aspnet" => "50210ced90d17ea8370fbbcade3fbfb9be92690faea77d5516dc8ade4eee83408b2d37f812cca020087441d2f3146507086792cff17f7413308eb12fa4abd66d"
        "7-arm-aspnet" => "ca84e0eff052d45b7fa9afd8a68f1d56264155b507881105d206969922057bf332895a3c3a2a1702648e46712f022574d93ae187c8fd2610f8392909568abf56"
        "7-arm64-aspnet" => "65406e1714a3117daa342b3fd0dbcd5c3214315611eacbbd8580827f69a07a9480530320ba40692a3d6dbff832d929a1420079f1db30ca3fd67a6fd035149d04"
        "7-x64-aspnet" => "a80f31193af70d556e8d026d39d79863c8389b065fe0778e7b4360f7d1f6d36503ba52736c40e74a716c3c30500b185816ed60d79b06ae295754b67374a1fa45"
        "8-arm-aspnet" => "45b1b3110cd2c6684c3120a719d7a62d7a6ac15474101e629f47ce012abe1c65aa67b93fb0a05128b7462fe3f03edc5cba40fc788004f888a8e3b27c861eec56"
        "8-arm64-aspnet" => "c71ea24716066096b48be5ce8b9fd3a144ff8658382f7b193c9c388eadb4279b644b2bc7a0293c01a61084399d5e89c8952f93ded90beaac6a01c361c57a8fe1"
        "8-x64-aspnet" => "84af156fd6145fc699c73865ea12a5994e43e788945fedcd5c80d9136b9482ad0d9e0bddb933f5f72ff1dcfb90d06dc2e94a21d02eda10bc1015f3e4b8639d14"
        "9-arm-aspnet" => "fa6c236044b167dfa0e389aaf3b8e42d1429f193af014b9ae6857e2dc1b64a65a8028c6ac17e83dbe5ec876e68ee9cb853dfe019c88b3a9fa15fcc6aa0b017f8"
        "9-arm64-aspnet" => "6303def8508ee4df979e6ee6801077da7d0517d3203bdff74a36cdbae57089d7c72691eda00a5daa740b283190950b5ca8ed0fa1112b7d2ab11c145909de9199"
        "9-x64-aspnet" => "9c41aa3bfca63c948ff873cc341a091049841167e644cc14f1f543fea3be75b10808c3848303916ff3472003accd801f7bc81fcc86d92c1a5c9ecd29d9bde3ba"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
