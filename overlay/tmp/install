#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # install dotnet dependencies
    let deps = [
        ca-certificates
        icu-libs
        krb5-libs
        libcrypto3
        libgcc
        libintl
        libssl3
        libstdc++
        zlib
    ]
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm/v7" => "arm"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision
    bf write $"Installing .NET v($revision)."

    # install .NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/runtime/9.0/alpine3.19/arm64v8/Dockerfile
    bf write "Installing .NET runtime."
    let dotnet_build = match (get_major $revision) {
        "9" => "9.0.0-preview.2.24128.5"
        _ => $revision
    }
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/9.0/alpine3.19/arm64v8/Dockerfile
    bf write $"Installing ASP.NET runtime."
    let aspnet_build = match (get_major $revision) {
        "9" => "9.0.0-preview.2.24128.4"
        _ => $revision
    }
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | bf fs is_not_dir) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"

    # add bf-aspnet module to config
    bf config use bf-aspnet
}

# Get the major version from a revision (i.e. get the first character)
def get_major [
    revision: string    # Revision number
] {
    $revision | split chars | first
}

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"(get_major $version)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-x64-dotnet" => "751ba56cc0d83f589930292260b9dbab3ff13774e1415f9bb6be4c94f8c46f98e0a6336085d7cf02cbea09bd690f5ca9e642adb73385fa8afb42e4a91b965f29"
        "6-arm-dotnet" => "506fae33908a93bcb4d6d9ac3515cbf7b29b772c5ae6cbdee202b72a02db6fe235193af0c8bef939a896720b4e63d6802a556f994a70020c26d69b8578f96dff"
        "6-arm64-dotnet" => "881d19337236d1680cd33ada05f6577787bc0d4b8b80037e18b871ea7bbe15971d6b6c635c5e14b1c4f3d47ed753cafc3bd468b2d426491cfcb7b8be2029561b"
        "7-x64-dotnet" => "5f2038dc6666b850b6a2ef20fbd4c505d061123a656b771ae03d2158db67fd0b106bd8d1f9e49eab4efd8fb36db28cfb937614f785ef942441afdb3829bbbe8f"
        "7-arm-dotnet" => "8f3bd4c79a1b2c9083cb0a454bab2abfd0209833edef9f5bc770a9bf4718370f16caed4759e0a5b6884a287eb9bdcd835fffd8c9ed39fff925e4a3661c217840"
        "7-arm64-dotnet" => "e2cafec76472a62f3d48c03bd9e87ca355b73b4dc13bacd858f0175e6eb2da999419e66abcbed35775d37a8bb8ccbf8ddc87075605312d8833ecf77649f286aa"
        "8-x64-dotnet" => "bbed0cf924d103e15d07e069522fc89d921e8d91adccbd4e161345b52fc8bdb26837a18c83d06ccd092d14d3df0e6acbe3b8d348e0825822807a1cbc1c8f549f"
        "8-arm-dotnet" => "2e047f0840ae83a86942452d1b5aa96685d1ec64259d7cfd51b944d05865eb4c32d80fca48ab0b70e651a7b6f9b2d43bf150f0e6ff841e719be28342bc26fcc5"
        "8-arm64-dotnet" => "3d464b41b9ba8c1f318295f0628c80c9e3d6c9ff017e24bcf4dcaad740c22d0593d5b47a158aa5b2dc956e14fb6e08d2720695e2416611fef291236ef913cbc6"
        "6-x64-aspnet" => "74cf511026f5d5926bd4a16b88c711b87810265d85d5c9ed54b12b63c06f584fd4a4053c77d71c4818e8eff187ea31682defb001c19d8176e326afb42f8af255"
        "6-arm-aspnet" => "a2e8499f4e9171b0ff6dc9048c1bf7a6974208f0f8bddc3af5b35da17b275f5b58479a543f974be875fda295fb9b00c87f760358b854edfe0bb6ecd893488539"
        "6-arm64-aspnet" => "0166ea4b46dd483dc17023557524d6d554d96c0955c44f565e11c948c4c19285ef806973ae4660999e78637709b73754d1eb91c0ac6c8e05b9c71e5d4ac7a979"
        "7-x64-aspnet" => "ccf14827a8ddadc846edc328f2a8015d1e7ff146adf2636207af760c309c2c0f61eae1222740b6fdf387c68d498d885f77a1db92f9bd9fcdb81326a315e684ff"
        "7-arm-aspnet" => "9902567cb9914bdb8d3da41dc4f1d3a8a0986848e99a25b2320b513de6666b979f8495b880277e9ebf0ca1adc8257df020fad62e653d07f28972cf5c729a6a83"
        "7-arm64-aspnet" => "07097cdd1cead0d87825895e0371477d5b9683611df10f66cda6816b82d0d293aba73966951d30aa364728035c86ee6950a559eaf7cc2661205d5140d9fdb6d0"
        "8-x64-aspnet" => "438ed9f5fef9cc63bae18f52af4209a80d8265ef6f9c7b92661e5276538b76163a79e6c59f5fe3d40133e8cdbed7ba50135ce365194358f4abe9df9231a124a5"
        "8-arm-aspnet" => "f3e55caaec7edd9afdea587a8e6f00fbb62d3491cee23fae415d4bb3e7c4aa4b8257ec24f56baca8a1319a9a2072880aaba0fcce6125a1645058eb3ea9aafc38"
        "8-arm64-aspnet" => "6a658818999428ab40616cec032bb58d0fd04567d255d84bef6b1d57fde4186b0e2e0633c45ad229cb9a2c2e7cc30b6980fd9eaaf464cdd73ccc38d35247a469"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    } install/download

    # return filename with extension
    $filename_with_ext
}
