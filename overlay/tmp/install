#!/usr/bin/nu

use bf

# Download URLs for .NET and ASP.NET runtimes
const dotnet_url = "https://dotnetcli.azureedge.net/dotnet/Runtime/{v}/dotnet-runtime-{v}-linux-musl-{a}.tar.gz"
const aspnet_url = "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/{v}/aspnetcore-runtime-{v}-linux-musl-{a}.tar.gz"

# Setup and install .NET runtime and ASP.NET
def main [] {
    # add www user
    bf user add www

    # install dotnet dependencies
    let deps = [
        ca-certificates
        icu-libs
        krb5-libs
        libgcc
        libintl
        libssl1.1
        libstdc++
        zlib
    ]
    bf write "Installing .NET dependencies."
    bf pkg install $deps

    # get platform architecture
    let platform = bf build | get Platform
    let arch = match $platform {
        "linux/amd64" => "x64"
        "linux/arm64" => "arm64"
        _ => { bf write error $"Unsupported platform: ($platform)" }
    }
    bf write $"Detected platform architecture is: ($arch)."

    # get .NET version
    cd /tmp
    let revision = bf fs read DOTNET_REVISION
    bf build add "ASP.NET" $revision
    bf write $"Installing .NET v($revision)."

    # install .NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/8.0/alpine3.18/arm64v8/Dockerfile
    bf write "Installing .NET runtime."
    let dotnet_build = match (get_major $revision) {
        "8" => "8.0.0-rc.2.23479.6"
        _ => $revision
    }
    let dotnet_file = download $dotnet_build $arch dotnet $dotnet_url
    let dotnet_dir = "/usr/share/dotnet"

    try {
        bf write $" .. extracting ($dotnet_file)."
        mkdir $dotnet_dir
        ^tar -oxzf $dotnet_file -C $dotnet_dir
        ^ln -s $"($dotnet_dir)/dotnet" /usr/bin/dotnet
    } catch {
        bf write error " .. error installing .NET runtime."
    }

    # install ASP.NET runtime
    # See https://github.com/dotnet/dotnet-docker/blob/main/src/aspnet/8.0/alpine3.18/arm64v8/Dockerfile
    bf write $"Installing ASP.NET runtime."
    let aspnet_build = match (get_major $revision) {
        "8" => "8.0.0-rc.2.23480.2"
        _ => $revision
    }
    let aspnet_file = download $aspnet_build $arch aspnet $aspnet_url
    let aspnet_dir = "shared/Microsoft.AspNetCore.App"

    try {
        bf write $" .. extracting ($aspnet_file)."
        ^tar -oxzf $aspnet_file -C $dotnet_dir $"./($aspnet_dir)"
    }

    if not ($"($dotnet_dir)/($aspnet_dir)/($aspnet_build)" | path exists) {
        bf write error " .. error installing ASP.NET runtime."
    }

    # save ASP.NET directory
    bf env set ASPNET_RUNTIME $"($dotnet_dir)/($aspnet_dir)"
}

# Get the major version from a revision (i.e. get the first character)
def get_major [
    revision: string    # Revision number
] {
    $revision | split chars | first
}

# Download and verify a runtime for .NET or ASP.NET
def download [
    version: string     # Runtime verison
    arch : string       # Platform architecture
    kind: string        # Runtime kind - 'dotnet' or 'aspnet'
    url_format: string  # URL format - see constants at top of module
] {
    # build the URL and filename
    let url = $url_format | str replace --all "{v}" $version | str replace --all "{a}" $arch
    let filename = $"(get_major $version)-($arch)-($kind)"
    let filename_with_ext = $"($filename).tar.gz"

    # download the requested runtime
    bf write $" .. downloading ($url)."
    http get $url | save $filename_with_ext

    # get the relevant hash
    let hash = match $filename {
        "6-x64-dotnet" => "7689d744353b1ff96953d517e6acce3e4a9f69649edfcf98d7fd73091a5b5dd9d22af48c1c806af77d1e14e1347cc15a760ce77ee3e0417cdb42b3595a4f5685"
        "6-arm64-dotnet" => "730139f03959449207670d4e1db4ea63d8935de7529f60bcac39c89c2dd4bba4e50fc2b0964698bec8be15cf2623e411dadda3ccb73d1bbe76d4f1be69d8c942"
        "7-x64-dotnet" => "5bd33d6c3948f76af32499169fa51919361d1ce010f682dca4d62ae970711d48b8c298447ee37b0a8363c578d373b4dfec457ac6d14b3e51f89578589d0d7720"
        "7-arm64-dotnet" => "ba4260ee73877f98d9454fed5abe0d278ba1eb3527d1a95f535eedade13d4637a84d375d820ac868b9055570a3748f6be2040f264737af09d113be56fc708a61"
        "8-x64-dotnet" => "22e77f222b2d9015352f97826c046cac81f33a3bc945837143b799895a55efffb536aec5040fdce95abcaddc2e4fcdc6d818b41b6b3c224d4902c6192cf9190c"
        "8-arm64-dotnet" => "bc9391771681719d7d44ac9357a877cb20a2d96e7cf13c05b7e9b1fc6905f6d9731202929cc42e5c8ad96d1edf22efd0e69ed62d63c889b554df56582dfd1918"
        "6-x64-aspnet" => "4f493a2ac2047611ce2145685c87c0013edb79972f43747cae15de3581391ebb5ea98d4cf77f6c06fd45e2ef13e2b4bbd355d73d73034951178fb25543f3a3b5"
        "6-arm64-aspnet" => "7447920d52a511eb89768f85a13f7eacfb8d72a16b0aa36ba9835bf18305bd5c23f3d19f82cd9533dd43883b8004533ac21e891924dcf8c4966b07494d7b5c2a"
        "7-x64-aspnet" => "793667d9677631afe9bc1346388a44d7d4349f557bb7a3a79bed4c0c149dd26910a3dcfa145b52c188e089f95f413972d9f9350bc21017ced41303354ab06e46"
        "7-arm64-aspnet" => "fb4acdfeec1043b280e9dfeeb97a8adfd3129579b87061dbf188cb930f4878914eadf724f337bfeda645bbd1eb8bd1eec5413301d07801a3c727b41396b09c52"
        "8-x64-aspnet" => "af6889f875d113d014f1655f9b265e3e83e4b8203b4093b653d4b325d91ec54ed0ba324f1f417284ce631454656fa02f39f0601286c4d6ecc7b63ac8a67eec6c"
        "8-arm64-aspnet" => "67fdc66ba42f38ce04636f3a742bcfcbd17440aea19fdfed19ba1bebb934ef71959dd7b324064f927bcd1ff0f020601f3923ea12d0320f0a5d810b4fe32ee651"
        _ => { bf write error $"Unsupported .NET download: ($filename)." }
    }

    # verify downloaded file
    bf write $" .. verifying ($filename) download." install/download
    { ^echo $"($hash)  ($filename_with_ext)" | ^sha512sum -c - } | bf handle -f {|code, err|
        bf write error $" .. checksum did not match for ($filename)." install/download
    }

    # return filename with extension
    $filename_with_ext
}
